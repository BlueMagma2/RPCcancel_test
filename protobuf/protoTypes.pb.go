// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protoTypes.proto

/*
Package protoTypes is a generated protocol buffer package.

It is generated from these files:
	protoTypes.proto

It has these top-level messages:
	Request
	SuccessIndicator
*/
package protoTypes

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Id      int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Request) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SuccessIndicator struct {
	Success bool `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *SuccessIndicator) Reset()                    { *m = SuccessIndicator{} }
func (m *SuccessIndicator) String() string            { return proto.CompactTextString(m) }
func (*SuccessIndicator) ProtoMessage()               {}
func (*SuccessIndicator) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SuccessIndicator) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*Request)(nil), "protoTypes.Request")
	proto.RegisterType((*SuccessIndicator)(nil), "protoTypes.SuccessIndicator")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Fraudtest service

type FraudtestClient interface {
	TransferMessage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*SuccessIndicator, error)
}

type fraudtestClient struct {
	cc *grpc.ClientConn
}

func NewFraudtestClient(cc *grpc.ClientConn) FraudtestClient {
	return &fraudtestClient{cc}
}

func (c *fraudtestClient) TransferMessage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*SuccessIndicator, error) {
	out := new(SuccessIndicator)
	err := grpc.Invoke(ctx, "/protoTypes.Fraudtest/TransferMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Fraudtest service

type FraudtestServer interface {
	TransferMessage(context.Context, *Request) (*SuccessIndicator, error)
}

func RegisterFraudtestServer(s *grpc.Server, srv FraudtestServer) {
	s.RegisterService(&_Fraudtest_serviceDesc, srv)
}

func _Fraudtest_TransferMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FraudtestServer).TransferMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoTypes.Fraudtest/TransferMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FraudtestServer).TransferMessage(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fraudtest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoTypes.Fraudtest",
	HandlerType: (*FraudtestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransferMessage",
			Handler:    _Fraudtest_TransferMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protoTypes.proto",
}

func init() { proto.RegisterFile("protoTypes.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 165 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x28, 0xca, 0x2f,
	0xc9, 0x0f, 0xa9, 0x2c, 0x48, 0x2d, 0xd6, 0x03, 0x33, 0x85, 0xb8, 0x10, 0x22, 0x4a, 0xc6, 0x5c,
	0xec, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x7c, 0x5c, 0x4c, 0x99, 0x29, 0x12, 0x8c,
	0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x4c, 0x99, 0x29, 0x42, 0x12, 0x5c, 0xec, 0xb9, 0xa9, 0xc5, 0xc5,
	0x89, 0xe9, 0xa9, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x30, 0xae, 0x92, 0x0e, 0x97, 0x40,
	0x70, 0x69, 0x72, 0x72, 0x6a, 0x71, 0xb1, 0x67, 0x5e, 0x4a, 0x66, 0x72, 0x62, 0x49, 0x7e, 0x11,
	0x48, 0x75, 0x31, 0x44, 0x0c, 0xac, 0x9a, 0x23, 0x08, 0xc6, 0x35, 0x0a, 0xe4, 0xe2, 0x74, 0x2b,
	0x4a, 0x2c, 0x4d, 0x29, 0x01, 0x59, 0xe2, 0xc2, 0xc5, 0x1f, 0x52, 0x94, 0x98, 0x57, 0x9c, 0x96,
	0x5a, 0xe4, 0x0b, 0x31, 0x4d, 0x48, 0x58, 0x0f, 0xc9, 0x85, 0x50, 0xc7, 0x48, 0xc9, 0x20, 0x0b,
	0xa2, 0x5b, 0x96, 0xc4, 0x06, 0x96, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x48, 0x6e,
	0xfb, 0xdc, 0x00, 0x00, 0x00,
}
